(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{229:function(e,t,r){"use strict";r.r(t);var o=r(0),c=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"electron"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#electron"}},[e._v("#")]),e._v(" Electron")]),e._v(" "),r("p",[e._v("[TOC]")]),e._v(" "),r("h2",{attrs:{id:"依赖"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#依赖"}},[e._v("#")]),e._v(" 依赖")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("electron")]),e._v("、"),r("code",[e._v("electron-packager")])])]),e._v(" "),r("h2",{attrs:{id:"主进程与渲染进程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#主进程与渲染进程"}},[e._v("#")]),e._v(" 主进程与渲染进程")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("运行 JS 脚本的进程称为主进程；")])]),e._v(" "),r("li",[r("p",[e._v("主进程使用 BrowserWindow 实例在渲染进程中渲染页面，有多少页面就有多少渲染进程")])]),e._v(" "),r("li",[r("p",[r("code",[e._v("const { BrowserWindow } = require('electron')")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("const win = new BrowserWindow()")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("let myNotification = new Notification('标题', { body: '通知正文内容' })")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("myNotification.onclick = () => console.log('通知被点击')")])])])]),e._v(" "),r("h2",{attrs:{id:"渲染进程调用-nodeapi"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程调用-nodeapi"}},[e._v("#")]),e._v(" 渲染进程调用 NodeAPI")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("引入 "),r("code",[e._v("electron")]),e._v(" 模块的 "),r("code",[e._v("remote")]),e._v(" 对象，"),r("code",[e._v('const remote= require("electron").remote')])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("remote")]),e._v(" 对象方法：")])]),e._v(" "),r("li",[r("p",[e._v("const { ipcRenderer } = "),r("strong",[e._v("require")]),e._v('("electron"); // 通讯 ipcMain')])])]),e._v(" "),r("h2",{attrs:{id:"进程间通讯"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程间通讯"}},[e._v("#")]),e._v(" 进程间通讯")]),e._v(" "),r("ul",[r("li",[r("code",[e._v('win.send("call", <msg>)')]),e._v(" - "),r("code",[e._v('ipcRenderer.on("call", (e, [msg]) => {})')])]),e._v(" "),r("li",[r("code",[e._v('ipcRenderer.send("call", <msg>)')]),e._v(" - "),r("code",[e._v('ipcMain.on("call", (e, [msg]) => {})')])])]),e._v(" "),r("h2",{attrs:{id:"打包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打包"}},[e._v("#")]),e._v(" 打包")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("electron-packager . <ProjectName> --win --out ../Snake --arch=x64 --app-version=0.0.1 --ignore=node_modules --electron-version=6.0.0")])])]),e._v(" "),r("h2",{attrs:{id:"调试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#调试"}},[e._v("#")]),e._v(" 调试")]),e._v(" "),r("p",[e._v("引入 electron 时："),r("code",[e._v('const { ipcRenderer } = window.require("electron")')]),e._v("，不然会报错")]),e._v(" "),r("p",[e._v("Electron 扩展了"),r("code",[e._v("window")]),e._v("对象")])])}),[],!1,null,null,null);t.default=c.exports}}]);