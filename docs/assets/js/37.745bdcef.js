(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{236:function(t,a,e){"use strict";e.r(a);var r=e(0),l=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"html5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html5"}},[t._v("#")]),t._v(" HTML5")]),t._v(" "),e("p",[t._v("[TOC]")]),t._v(" "),e("h2",{attrs:{id:"新增属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新增属性"}},[t._v("#")]),t._v(" 新增属性")]),t._v(" "),e("ul",[e("li",[t._v("contentEditable：使元素内容在页面中可编辑，该属性可继承；")]),t._v(" "),e("li",[t._v("spellCheck：对元素的输入内容进行拼写检查；")]),t._v(" "),e("li",[t._v("placeholder")]),t._v(" "),e("li",[t._v('<* id="el" data-info="" /> => el.dataset.info')])]),t._v(" "),e("h2",{attrs:{id:"新增元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新增元素"}},[t._v("#")]),t._v(" 新增元素")]),t._v(" "),e("h2",{attrs:{id:"history"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[t._v("#")]),t._v(" History")]),t._v(" "),e("ul",[e("li",[t._v("HTML5 History API 能在不刷新整个页面的情况下修改站点的 URL")]),t._v(" "),e("li",[e("code",[t._v("history.replaceState([data], [title], [url])")]),t._v(" 方法会替换地址栏中的 URL，但不会修改浏览器的 History")]),t._v(" "),e("li",[e("code",[t._v("history.pushState([data], [title], [url])")]),t._v(" 方法会修改浏览器的 History")]),t._v(" "),e("li",[t._v("[data] 用来传递我们需要的数据，当页面的状态发生变化时我们可以接收到该数据。如用户点击浏览器的后退和向前按钮。需要注意的是在 Firefox 中只允许传递最多 640K 的数据")]),t._v(" "),e("li",[t._v("[title] 是一个字符串，不过截止到目前，几乎所有的浏览器都忽略该参数")]),t._v(" "),e("li",[t._v("[url] 是我们想要替换的 URL")])])])}),[],!1,null,null,null);a.default=l.exports}}]);