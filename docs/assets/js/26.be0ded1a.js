(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{224:function(v,_,a){"use strict";a.r(_);var t=a(0),e=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"dart"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dart"}},[v._v("#")]),v._v(" Dart")]),v._v(" "),a("p",[v._v("[TOC]")]),v._v(" "),a("h2",{attrs:{id:"环境搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[v._v("#")]),v._v(" 环境搭建")]),v._v(" "),a("h2",{attrs:{id:"基础语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础语法"}},[v._v("#")]),v._v(" 基础语法")]),v._v(" "),a("h3",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[v._v("#")]),v._v(" 数据类型")]),v._v(" "),a("ul",[a("li",[v._v("Number: int\\double")]),v._v(" "),a("li",[v._v("String")]),v._v(" "),a("li",[v._v("Boolean: bool")]),v._v(" "),a("li",[v._v("List")]),v._v(" "),a("li",[v._v("Maps")])]),v._v(" "),a("h3",{attrs:{id:"声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明"}},[v._v("#")]),v._v(" 声明")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("<dataType> <varName> = date")])]),v._v(" "),a("li",[a("code",[v._v("var")]),v._v(" 语句能够声明任意类型的静态类型变量")]),v._v(" "),a("li",[a("code",[v._v("dynamic")]),v._v(" 语句能够声明任意类型的动态类型变量")]),v._v(" "),a("li",[v._v("声明函数时需要声明返回值类型："),a("code",[v._v("<returnType> <functionName> = function")])]),v._v(" "),a("li",[a("code",[v._v("void")]),v._v(" 语句能够声明没有返回值的函数")]),v._v(" "),a("li",[v._v("不声明返回值类型的函数可以返回任意类型")]),v._v(" "),a("li",[v._v("不定参数用 "),a("code",[v._v("[]")]),v._v(" 框起来，默认参数用赋值运算符")]),v._v(" "),a("li",[a("code",[v._v("final")]),v._v(" 类似 "),a("code",[v._v("const")]),v._v("，但 "),a("code",[v._v("final")]),v._v(" 是惰性初始化，即在第一次使用时才进行初始化")])]),v._v(" "),a("h3",{attrs:{id:"面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[v._v("#")]),v._v(" 面向对象")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("Dart 中没有 public 之类的访问修饰符，在属性或方法前加 "),a("code",[v._v("_")]),v._v(" 表示其为私有，但必须将其所属的类抽离成模块才能生效")])]),v._v(" "),a("li",[a("p",[v._v("类名同时也作为该类实例的声明语句")])]),v._v(" "),a("li",[a("p",[v._v("与类名同名的方法为该类的默认初始化方法，不需要声明返回值类型")])]),v._v(" "),a("li",[a("p",[v._v("命名初始化方法："),a("code",[v._v("<默认初始化方法>.<命名初始化方法>() {}")])])]),v._v(" "),a("li",[a("p",[v._v("初始化方法简写："),a("code",[v._v("<初始化方法>(this.xxx)")])])]),v._v(" "),a("li",[a("p",[v._v("初始化列表："),a("code",[v._v("<初始化方法>():dataName=data {}")])])]),v._v(" "),a("li",[a("p",[v._v("计算方法能够当作属性使用：")]),v._v(" "),a("ul",[a("li",[v._v("getter: "),a("code",[v._v("get dataName { return }")])]),v._v(" "),a("li",[v._v("setter: "),a("code",[v._v("set dataName(value) {} dataName = value;")])])])]),v._v(" "),a("li",[a("p",[a("code",[v._v("static")]),v._v(" 标识静态成员，在类中调用静态成员不需要类名作为前缀")])]),v._v(" "),a("li",[a("p",[v._v("静态成员无法访问实例成员")])]),v._v(" "),a("li",[a("p",[v._v("对象操作符")]),v._v(" "),a("ul",[a("li",[v._v("条件运算符："),a("code",[v._v("clsName?.method()")]),v._v(" 判断对象为空时不执行")]),v._v(" "),a("li",[v._v("类型判断："),a("code",[v._v("if(child is Parent)")]),v._v("，相当于 JS 的"),a("code",[v._v("instanceof")])]),v._v(" "),a("li",[v._v("类型转换："),a("code",[v._v("child as Parent")]),v._v("，转换实例的类")]),v._v(" "),a("li",[v._v("级联（链式）操作："),a("code",[v._v("flag.a = 1..b = 2;")])])])]),v._v(" "),a("li",[a("p",[v._v("建议在复写父类方法时，标注："),a("code",[v._v("@override")]),v._v("；")])]),v._v(" "),a("li",[a("p",[v._v("引用父类的构造函数："),a("code",[v._v("<初始化方法>(xxx):super(yyy) {}")])])]),v._v(" "),a("li",[a("p",[a("code",[v._v("super")]),v._v(" 返回父类的引用，用以调用父类的构造函数及实例属性方法")])])]),v._v(" "),a("h3",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[v._v("#")]),v._v(" 接口")]),v._v(" "),a("ul",[a("li",[v._v("抽象类，对后代类的行为进行约束，无法直接实例化："),a("code",[v._v("abstract class <抽象类名> {}")])]),v._v(" "),a("li",[v._v("抽象方法：语法相当于没有函数体的普通方法，后代类必须实现抽象方法")]),v._v(" "),a("li",[v._v("接口："),a("code",[v._v("class <className> implements <抽象类名> {}")])]),v._v(" "),a("li",[v._v("接口是一种特殊抽象类(语法角度)，只能有抽象方法和常量")]),v._v(" "),a("li",[v._v("如果是复用已有的类的实现，使用继承(extends)，如果只是使用已有类的外在行为，使用接口(implements)")]),v._v(" "),a("li",[v._v("接口出了要实现抽象方法，还需要实现属性；")]),v._v(" "),a("li",[v._v("一个类可以有多个接口，但不能多继承")]),v._v(" "),a("li",[v._v("使用 mixins 实现混合："),a("code",[v._v("class C with A,B {}")]),v._v("，A 和 B 中不能有构造函数，并且只能继承自 Object")]),v._v(" "),a("li",[v._v("mixins 的类型就是其超类的子类型")])]),v._v(" "),a("h3",{attrs:{id:"泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[v._v("#")]),v._v(" 泛型")]),v._v(" "),a("ul",[a("li",[v._v("泛型能够校验不确定的数据类型，用"),a("code",[v._v("<T>")]),v._v("来表示："),a("code",[v._v("T fn<T>(T val) {}")])]),v._v(" "),a("li",[v._v("E(element)、T(type)、K(key)、V(value)是泛型中常用的几个名称,实际上定义泛型时完全可以不使用它们.")]),v._v(" "),a("li",[a("code",[v._v("fn<String>()")]),v._v(" 函数的参数及返回值都必须是 String")]),v._v(" "),a("li",[v._v("应用："),a("code",[v._v("class List<T> {} list l = new List<int>()")])])]),v._v(" "),a("h2",{attrs:{id:"库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#库"}},[v._v("#")]),v._v(" 库")]),v._v(" "),a("ul",[a("li",[v._v("自定义库："),a("code",[v._v('import "lib/xxx.dart";')])]),v._v(" "),a("li",[v._v("内置库："),a("code",[v._v('import "dart/io";')])]),v._v(" "),a("li",[v._v("Pub 库："),a("code",[v._v('import "package:serral/xxx.dart";')]),v._v(" "),a("ul",[a("li",[v._v("创建 "),a("em",[v._v("pubspec.yaml")]),v._v(" 文件，配置依赖；")]),v._v(" "),a("li",[v._v("运行 "),a("code",[v._v("pub get")]),v._v(";")])])])]),v._v(" "),a("h2",{attrs:{id:"笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#笔记"}},[v._v("#")]),v._v(" 笔记")]),v._v(" "),a("ul",[a("li",[v._v("final 类似 const，但 final 是惰性初始化，即在第一次使用时才进行初始化")]),v._v(" "),a("li",[v._v("a ??= 1; 如果 a 为空的话，将 1 赋值给 a")]),v._v(" "),a("li",[v._v("b = a ?? 1; 如果 a 为空的话，将 1 赋值给 b")]),v._v(" "),a("li",[v._v("data is type 判断数据类型")]),v._v(" "),a("li",[v._v("str.isEmpty 判断是否为空字符串")]),v._v(" "),a("li",[v._v("num.isNaN 判断是否为 NaN")]),v._v(" "),a("li",[v._v("访问修饰符")]),v._v(" "),a("li",[v._v("dart2js dart 文件名 --out=js 文件名")])]),v._v(" "),a("hr"),v._v(" "),a("p",[v._v("a ??= 1; 如果 a 为空的话，将 1 赋值给 a")]),v._v(" "),a("p",[v._v("b = a ?? 1; 如果 a 为空的话，将 1 赋值给 b")]),v._v(" "),a("p",[v._v("data is type 判断数据类型")]),v._v(" "),a("p",[v._v("str.isEmpty 判断是否为空字符串")]),v._v(" "),a("p",[v._v("num.isNaN 判断是否为 NaN")]),v._v(" "),a("p",[v._v("可选参数使用中括号包裹")])])}),[],!1,null,null,null);_.default=e.exports}}]);