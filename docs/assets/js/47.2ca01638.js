(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{248:function(v,_,t){"use strict";t.r(_);var a=t(0),e=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"知识归纳"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#知识归纳"}},[v._v("#")]),v._v(" 知识归纳")]),v._v(" "),t("p",[v._v("[toc]")]),v._v(" "),t("h2",{attrs:{id:"前端概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端概述"}},[v._v("#")]),v._v(" 前端概述")]),v._v(" "),t("blockquote",[t("p",[v._v("WEB 开发领域中的前端指互联网产品里直接与用户交互的部分，负责呈现视图界面和采集输入信息。\n前端技术指以 "),t("code",[v._v("HTML")]),v._v("、"),t("code",[v._v("CSS")]),v._v(" 和 "),t("code",[v._v("JavaScript")]),v._v(" 为核心的技术组合与解决方案。")])]),v._v(" "),t("h3",{attrs:{id:"前端三大件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端三大件"}},[v._v("#")]),v._v(" 前端三大件")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("HTML")]),v._v("（HyperText Markup Language）是一种用于描述页面文档结构的标记语言（结构层）")]),v._v(" "),t("li",[t("code",[v._v("CSS")]),v._v("（Cascading Style Sheets）是一种用于描述页面文档呈现效果的样式语言（表现层）")]),v._v(" "),t("li",[t("code",[v._v("JavaScript")]),v._v(" 是一种用于实现客户端功能与业务逻辑的脚本语言（行为层）")])]),v._v(" "),t("h3",{attrs:{id:"前端倾向性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端倾向性"}},[v._v("#")]),v._v(" 前端倾向性")]),v._v(" "),t("ul",[t("li",[v._v("偏向设计，处理用户体验、着手界面交互\naudio/video & SVG/canvas/webGL")]),v._v(" "),t("li",[v._v("偏向工程，处理业务逻辑、着手数据交互")])]),v._v(" "),t("h2",{attrs:{id:"javascript-在浏览器上的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-在浏览器上的实现"}},[v._v("#")]),v._v(" JavaScript 在"),t("em",[v._v("浏览器")]),v._v("上的实现")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("JS 是基于 ES 规范的实现")]),v._v("\nES（ECMAScript）是一种语言规范，"),t("code",[v._v("JavaScript")]),v._v(" 是 ES 规范的实现，但包含超出 ES 规范的功能")]),v._v(" "),t("li",[t("strong",[v._v("JS 的文档操作基于 DOM")]),v._v("\nDOM（Document Object Model）是由 W3C 组织推荐的处理 "),t("code",[v._v("HTML")]),v._v(" 的标准编程接口，不同浏览器对于 DOM 的支持存在差异。浏览器会将 "),t("code",[v._v("HTML")]),v._v(" 文档解析成节点树，即 DOM。通过 "),t("code",[v._v("Document")]),v._v(" 和 "),t("code",[v._v("Element")]),v._v(" 对象下的方法能够对节点进行操作，以此来达到操作文档的目的。")]),v._v(" "),t("li",[t("strong",[v._v("JS 在浏览器上的所有行为都基于 BOM")]),v._v("\nBOM（Browser Object Model）是浏览器提供的所有 API，DOM 是 BOM 的子集。在浏览器中，"),t("code",[v._v("Window")]),v._v(" 对象是全局（Global）对象，包括 "),t("code",[v._v("Document")]),v._v(" 在内的所有对象都是全局对象的成员。")]),v._v(" "),t("li",[t("strong",[v._v("jQuery")]),v._v("\njQuery 是一个 "),t("code",[v._v("JavaScript")]),v._v(" 函数库，为 JS 添加了许多语法糖，并解决跨浏览器时的兼容问题。\n选择器（过滤器）/ 样式操作 / DOM 操作 / 事件监听（绑定）")]),v._v(" "),t("li",[v._v("JS 的内存管理\n垃圾回收...")])]),v._v(" "),t("h2",{attrs:{id:"css-进阶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-进阶"}},[v._v("#")]),v._v(" CSS 进阶")]),v._v(" "),t("blockquote",[t("p",[v._v("尽管“ "),t("em",[v._v("CSS3")]),v._v(" ”这个称呼十分流行，但实际上其并没有在任何规范中被定义过。在 CSS2 之后，由于语言定义过于庞大，以至于无法将其塞进单个规范之中，只得将其打散到多个模块。因此 CSS3 泛指 CSS2 之后的所有新规范。")])]),v._v(" "),t("ul",[t("li",[v._v("响应式设计与媒体查询")]),v._v(" "),t("li",[v._v("CSS 变量与预处理语言\n预处理语言扩展了 CSS，增加了规则、变量、混入、选择器、继承等特性，易于组织和维护")]),v._v(" "),t("li",[v._v("CSS 过渡与 CSS 动画")]),v._v(" "),t("li",[v._v("Flex 布局")]),v._v(" "),t("li",[v._v("栅格布局（BootStrap）")]),v._v(" "),t("li",[v._v("浏览器前缀（兼容/回退）")])]),v._v(" "),t("h2",{attrs:{id:"引擎性能与-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引擎性能与-node"}},[v._v("#")]),v._v(" 引擎性能与 Node")]),v._v(" "),t("h3",{attrs:{id:"网页渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网页渲染"}},[v._v("#")]),v._v(" 网页渲染")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("浏览器的渲染引擎负责获取标记式内容和整理样式信息")])]),v._v(" "),t("li",[t("strong",[v._v("页面渲染过程")]),v._v("\n首先解析 "),t("code",[v._v("HTML")]),v._v(" 并构建 DOM 树，解析 "),t("code",[v._v("CSS")]),v._v(" 样式规则并构建 CSSOM 树，然后将两者合并为渲染（Render）树，最后绘制（Paint）到显示器上。")]),v._v(" "),t("li",[v._v("节点尺寸发生变化时会引起回流（Reflow），引擎会重新解析 DOM；")]),v._v(" "),t("li",[v._v("回流必定引起重绘（Repaint），但重绘可以单独触发；")]),v._v(" "),t("li",[v._v("DOM 操作性能优化：\n"),t("ol",[t("li",[v._v("避免逐个修改节点样式，尽量一次性修改；")]),v._v(" "),t("li",[v._v("将结构复杂或者需要多次修改的节点脱离文档流")])])])]),v._v(" "),t("h3",{attrs:{id:"node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node"}},[v._v("#")]),v._v(" Node")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("最初，JS 解析引擎仅运行在浏览器上")]),v._v("\nChrome_v8 引擎会在运行之前将 "),t("code",[v._v("JavaScript")]),v._v(" 编译成机器码，而非字节码或是解释执行它。这使得 "),t("code",[v._v("JavaScript")]),v._v(" 的执行速度能媲美二进制编译，为其扩展到其他应用领域奠定基础。")]),v._v(" "),t("li",[t("strong",[v._v("Node 使 JS 代码能够脱离浏览器直接运行在操作系统上")]),v._v("\nNode.js 是一个跨平台的 JS 运行环境，其封装了 v8 引擎并且配套了完善的系统级 API。由于继承了 JS 的事件驱动模式、单线程、非阻塞式异步 I/O 等特性，使得 Node 十分善于应对高并发的 I/O 密集型应用场景")]),v._v(" "),t("li",[t("strong",[v._v("CommonJS 规范")]),v._v(" "),t("code",[v._v("ECMAScript")]),v._v(" 规范定义的 API 局限于构建浏览器应用程序，"),t("code",[v._v("JavaScript")]),v._v(" 亟需一个适用面更广泛的应用程序的标准库；"),t("code",[v._v("CommonJS")]),v._v(" 提供了 JS 在浏览器以外环境运行所需的 API 规范，如模块规范等。Node.js 是 "),t("code",[v._v("CommonJS")]),v._v(" 规范的实现。")]),v._v(" "),t("li",[t("strong",[v._v("NPM")]),v._v(" "),t("code",[v._v("JavaScript")]),v._v(" 本身不具备模块和包结构，包在模块的基础上进一步组织 "),t("code",[v._v("JavaScript")]),v._v(" 代码。NPM 是 Node.js 附带的包管理器，用于快速安装和管理依赖包。")])]),v._v(" "),t("h2",{attrs:{id:"html5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#html5"}},[v._v("#")]),v._v(" HTML5")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("HTML5")]),v._v(" 是 "),t("code",[v._v("HTML")]),v._v(" 的最新修订版本，2014 年由万维网联盟（W3C）完成标准制定。其设计目的是为 了在移动设备上支持多媒体。")]),v._v(" "),t("li",[v._v("广义论及 "),t("code",[v._v("HTML5")]),v._v(" 时，实际指的是包括 "),t("code",[v._v("HTML")]),v._v("、"),t("code",[v._v("CSS")]),v._v(" 和 "),t("code",[v._v("JavaScript")]),v._v(" 在内的一套技术组合，旨在减少浏览器在现代丰富的网络应用服务上对插件的依赖，并且提供更多能有效加强网络应用的标准集。")]),v._v(" "),t("li",[t("code",[v._v("HTML5")]),v._v(" 添加了许多新的语法特征，包括标签语义化、本地存储、多媒体以及对 "),t("code",[v._v("CSS3")]),v._v(" 和设备原生 API 的支持等。推进了 WEB 应用的发展。")]),v._v(" "),t("li",[v._v("单线程是 "),t("code",[v._v("JavaScript")]),v._v(" 的特点，为了利用多核 CPU "),t("code",[v._v("的计算能力，HTML5")]),v._v(" 提出 Web Worker 标准，允许 "),t("code",[v._v("JavaScript")]),v._v(" 脚本创建多个线程，但是子线程（Worker）完全受主线程（Master）控制，且不得操作 DOM。因而，这个新标准并没有改变 "),t("code",[v._v("JavaScript")]),v._v(" 单线程的本质。")]),v._v(" "),t("li",[v._v("移动端 H5")]),v._v(" "),t("li",[v._v("SVG")])]),v._v(" "),t("h2",{attrs:{id:"web-应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-应用"}},[v._v("#")]),v._v(" WEB 应用")]),v._v(" "),t("h3",{attrs:{id:"cs-架构与-bs-架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cs-架构与-bs-架构"}},[v._v("#")]),v._v(" CS 架构与 BS 架构")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("CS 架构即 Client / Server 架构")]),v._v("\n这种模式中程序功能实现的核心部分运行在客户端上\n特点是交互性强、数据安全、性能优越")]),v._v(" "),t("li",[t("strong",[v._v("BS 架构即 Browser / Server 架构")]),v._v("\n这种模式中程序功能实现的核心部分运行在服务器端\n特点是分布性强、开发简单、维护方便")]),v._v(" "),t("li",[t("strong",[v._v("现状与趋势")]),v._v("\nCS 架构早已江河日下，但 WEB 应用的发展趋势又似乎在回归 CS 架构？")])]),v._v(" "),t("h3",{attrs:{id:"事件驱动与数据驱动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件驱动与数据驱动"}},[v._v("#")]),v._v(" 事件驱动与数据驱动")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("事件驱动实现交互")]),v._v("\n在浏览器中，DOM 节点上的事件绑定是用来驱动业务逻辑的主要手段，程序对事件的响应其实就是调用预先编制好的代码来对事件进行处理。\n每个事件都会有一个 Event 对象，里面包含了与事件相关的信息。比如 Event.target 就是触发事件的 DOM 节点。\n"),t("code",[v._v("JavaScript")]),v._v(" 中的事件流分为"),t("em",[v._v("事件冒泡")]),v._v("与"),t("em",[v._v("事件捕获")]),v._v("。")]),v._v(" "),t("li",[t("strong",[v._v("事件驱动（Event Driver）模式开发")]),v._v("\n首先设计 DOM 结构，并在此基础上绑定事件回调，监听到事件后对应的回调会对 DOM 进行操作，以此实现交互。")]),v._v(" "),t("li",[t("strong",[v._v("数据驱动（Data Driver）模式开发")]),v._v("\n首先设计数据结构，再将数据依照固定逻辑转变成 DOM，事件回调会对数据进行操作，数据受到的影响会映射到 DOM 上，以此实现交互。")]),v._v(" "),t("li",[v._v("数据驱动的设计思维与 MVVM 没有必然联系，但 MVVM 框架提供的一些具现方式将数据驱动变得更加轻松。")])]),v._v(" "),t("h3",{attrs:{id:"事件循环机制（event-loop）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制（event-loop）"}},[v._v("#")]),v._v(" 事件循环机制（Event loop）")]),v._v(" "),t("ul",[t("li",[v._v("由于 "),t("code",[v._v("JavaScript")]),v._v(" 是单线程语言，同一时间只能执行一个任务，其余的任务都会在任务队列（Task queue）中等待被执行。")]),v._v(" "),t("li",[v._v("工作进程在监听到事件后，会将事件消息加入到消息队列（Message queue）中。")]),v._v(" "),t("li",[v._v("主进程在清空当前任务队列后，会检查消息队列，依据消息中的事件信息，将对应的回调函数（Callback）添加到任务队列中，并再次执行任务队列，如此往复。")])]),v._v(" "),t("h3",{attrs:{id:"mvc-与-mvvm-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc-与-mvvm-模式"}},[v._v("#")]),v._v(" MVC 与 MVVM 模式")]),v._v(" "),t("blockquote",[t("p",[v._v("为解决直接将脚本语言嵌入 HTML 所导致的可维护性差问题，WEB 应用引入了 Model-View-Controller 的模式，来简化 WEB 开发")])]),v._v(" "),t("h3",{attrs:{id:"vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[v._v("#")]),v._v(" Vue")]),v._v(" "),t("p",[t("router-link",{attrs:{to:"/note/vue.html"}},[v._v("Vue 语法")])],1),v._v(" "),t("ul",[t("li",[v._v("APP（计算机应用程序）")]),v._v(" "),t("li",[v._v("SPA（单页面应用）")]),v._v(" "),t("li",[v._v("前后端分离开发模式")]),v._v(" "),t("li",[v._v("Virtual（虚拟）DOM\nVirtual DOM 则会对需要修改的 DOM 进行比较（DIFF），从而只选择需要修改的部分")]),v._v(" "),t("li",[v._v("三大框架（Angular、React、Vue）\n1.MVVM 流（A/V）双向数据绑定； 2.函数式编程（R）\n组件化")]),v._v(" "),t("li",[v._v("AJAX")]),v._v(" "),t("li",[v._v("TypeScript")])]),v._v(" "),t("h2",{attrs:{id:"跨平台"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨平台"}},[v._v("#")]),v._v(" 跨平台")]),v._v(" "),t("ul",[t("li",[v._v("HTML 与 CSS 带来的 UI 构建")]),v._v(" "),t("li",[t("code",[v._v("Cordova")])]),v._v(" "),t("li",[t("code",[v._v("Electron")])]),v._v(" "),t("li",[v._v("zepto")])]),v._v(" "),t("h2",{attrs:{id:"设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[v._v("#")]),v._v(" 设计模式")]),v._v(" "),t("ul",[t("li",[v._v("面向过程式编程、面向对象式编程和函数式编程")])]),v._v(" "),t("h3",{attrs:{id:"单例模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[v._v("#")]),v._v(" 单例模式")]),v._v(" "),t("ul",[t("li",[v._v("指单例类只创建一个实例，并提供访问该实例的全局接口")]),v._v(" "),t("li",[v._v("作用：\n"),t("ol",[t("li",[v._v("避免一个全局使用的类频繁地创建与销毁，浪费系统资源")]),v._v(" "),t("li",[v._v("保证一个功能只由一个实例来处理")])])])]),v._v(" "),t("h2",{attrs:{id:"数据结构与算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法"}},[v._v("#")]),v._v(" 数据结构与算法")]),v._v(" "),t("h3",{attrs:{id:"数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[v._v("#")]),v._v(" 数据结构")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("栈（Stack）")]),v._v("\n栈是一种遵从后进先出原则的有序集合")]),v._v(" "),t("li",[t("strong",[v._v("队列（Queue）")]),v._v("\n队列是一种遵循先进先出原则的有序集合")]),v._v(" "),t("li",[t("strong",[v._v("链表（LinkedList）")]),v._v("\n相较于传统数组，链表的一个好处在于，添加或移除元素时不需要移动其他元素")]),v._v(" "),t("li",[t("strong",[v._v("集合（Set）")]),v._v("\n集合由一组无序且唯一的项组成")]),v._v(" "),t("li",[t("strong",[v._v("字典（Map）")]),v._v("\n字典由一组无序的键值对组成，其中键是唯一的")]),v._v(" "),t("li",[t("strong",[v._v("散列表（HashTable）")]),v._v("\n散列算法的作用是尽可能快地在数据结构中找到一个值，属于非线性数据结构 *处理散列冲突")]),v._v(" "),t("li",[t("strong",[v._v("树（Tree）")]),v._v("\n树是一种分层数据的抽象模型，属于非线性数据结构")]),v._v(" "),t("li",[t("strong",[v._v("图（Graph）")]),v._v("\n图是网络结构的抽象模型，是一组由边连接的节点（或顶点），属于非线性数据结构")])]),v._v(" "),t("h3",{attrs:{id:"算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[v._v("#")]),v._v(" 算法")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("排序和搜索算法")])]),v._v(" "),t("li",[t("strong",[v._v("算法模式")]),v._v(" "),t("ul",[t("li",[v._v("递归")]),v._v(" "),t("li",[v._v("动态规划")]),v._v(" "),t("li",[v._v("贪心法则")])])]),v._v(" "),t("li",[t("strong",[v._v("函数式编程与命令式编程")]),v._v(" "),t("ul",[t("li",[v._v("函数式编程的主要目标是描述数据，以及要对数据应用的转换；")]),v._v(" "),t("li",[v._v("函数式编程中程序执行顺序的重要性很低，而命令式编程则相反；")]),v._v(" "),t("li",[v._v("在函数式编程中，我们可以使用和滥用函数和递归，而在命令式编程中，则使用循环、赋值、条件和函数")])])]),v._v(" "),t("li",[t("strong",[v._v("算法复杂度")]),v._v(" "),t("ul",[t("li",[v._v("大 O 表示法")]),v._v(" "),t("li",[v._v("NP 完全理论概述")])])])]),v._v(" "),t("h3",{attrs:{id:"语言类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语言类型"}},[v._v("#")]),v._v(" 语言类型")]),v._v(" "),t("ul",[t("li",[v._v("编译型：先编译，后执行")]),v._v(" "),t("li",[v._v("解释型：解释一行，执行一行")]),v._v(" "),t("li",[v._v("强类型：数据类型检查严格，不能容忍隐式类型转换（Python）")]),v._v(" "),t("li",[v._v("弱类型：数据类型检查不严格，能容忍隐式类型转换（JavaScript）")]),v._v(" "),t("li",[v._v("静态类型：声明（编译）时确定数据类型，类型错误属于语法错误")]),v._v(" "),t("li",[v._v("动态类型：声明（编译）时未确定数据类型，类型错误属于运行时错误（Python、JavaScript）")])]),v._v(" "),t("h2",{attrs:{id:"git-github"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-github"}},[v._v("#")]),v._v(" Git & GitHub")]),v._v(" "),t("p",[t("router-link",{attrs:{to:"/note/Git&GitHub.html"}},[v._v("Git & GitHub 使用指南")])],1),v._v(" "),t("ul",[t("li",[v._v("Git 是一个开源的分布式版本控制系统，用于敏捷高效地开发和维护项目。")]),v._v(" "),t("li",[v._v("Git 采用了分布式版本库的方式，不需要服务器端的支持")]),v._v(" "),t("li",[v._v("Git 本地库包括开发区、暂存区和版本库")]),v._v(" "),t("li",[v._v("GitHub 是一个面向开源及私有软件项目的托管平台")])]),v._v(" "),t("h2",{attrs:{id:"后台服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后台服务"}},[v._v("#")]),v._v(" 后台服务")]),v._v(" "),t("ul",[t("li",[v._v("Linux")]),v._v(" "),t("li",[v._v("shell")]),v._v(" "),t("li",[v._v("云计算")]),v._v(" "),t("li",[v._v("Nginx 1.反向代理 2.负载均衡")]),v._v(" "),t("li",[v._v("Node（express、jade、pm2 模块）")]),v._v(" "),t("li",[v._v("cookie、JWP")])]),v._v(" "),t("h2",{attrs:{id:"数据库与网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库与网络"}},[v._v("#")]),v._v(" 数据库与网络")]),v._v(" "),t("ul",[t("li",[v._v("MySQL（mongoDB）")]),v._v(" "),t("li",[v._v("HTTP/HTTPS")]),v._v(" "),t("li",[v._v("TCP/IP")]),v._v(" "),t("li",[v._v("加密验证")]),v._v(" "),t("li",[v._v("JSON")]),v._v(" "),t("li",[v._v("RegExp")])]),v._v(" "),t("h2",{attrs:{id:"python"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python"}},[v._v("#")]),v._v(" Python")]),v._v(" "),t("p",[t("router-link",{attrs:{to:"/note/python.html"}},[v._v("Python 语法")])],1)])}),[],!1,null,null,null);_.default=e.exports}}]);