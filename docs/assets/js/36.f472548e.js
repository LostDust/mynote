(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{236:function(v,_,t){"use strict";t.r(_);var e=t(0),i=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"git-github-使用指南"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-github-使用指南"}},[v._v("#")]),v._v(" Git / GitHub 使用指南")]),v._v(" "),t("p",[v._v("[TOC]")]),v._v(" "),t("h2",{attrs:{id:"本地库操作命令（命令行）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地库操作命令（命令行）"}},[v._v("#")]),v._v(" 本地库操作命令（命令行）")]),v._v(" "),t("h3",{attrs:{id:"准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[v._v("#")]),v._v(" 准备工作")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[t("code",[v._v("git init")]),v._v(" 本地库初始化命令")]),v._v("\n该命令会在项目根目录下创建 .git 目录，里面存放了与本地库相关的配置文件")])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git config")]),v._v(" 设置项目级签名")]),v._v("\n项目级签名仅在当前项目内生效\n"),t("strong",[t("code",[v._v("git config --global")]),v._v(" 设置系统级签名")]),v._v("\n系统级签名在当前系统用户下生效\n命令 + "),t("code",[v._v("user.name ***")]),v._v(" 设置用户名\n命令 + "),t("code",[v._v("user.email ***")]),v._v(" 设置邮箱地址")]),v._v(" "),t("blockquote",[t("p",[v._v("项目级签名的优先级比系统级签名更高\n项目级签名保存在 ./.git/config 文件里\n系统级签名保存在 /c/User/用户名/.gitconfig 文件里")])])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git clone <url>")]),v._v(" 命令会拷贝一个 git 仓库到本地")])])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("--soft")]),v._v(" 后缀表示只对版本库进行操作")]),v._v(" "),t("strong",[t("code",[v._v("--mixed")]),v._v(" 后缀表示对版本库和暂存区进行操作")]),v._v(" "),t("strong",[t("code",[v._v("--hard")]),v._v(" 后缀表示对版本库、暂存区和工作区进行操作修改")])])])]),v._v(" "),t("h3",{attrs:{id:"暂存区操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#暂存区操作"}},[v._v("#")]),v._v(" 暂存区操作")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[t("code",[v._v("git status")]),v._v(" 查看项目的文件状态")]),v._v(" "),t("code",[v._v("-s")]),v._v(" 后缀表示简略信息。\n"),t("strong",[v._v("该命令会显示：")])]),v._v(" "),t("ol",[t("li",[v._v("从工作区里添加到暂存区的文件（跟踪状态）")]),v._v(" "),t("li",[v._v("未从工作区里添加到暂存区的文件（未跟踪状态）")]),v._v(" "),t("li",[v._v("暂存区里未进行更新的文件")])])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git diff <file>")]),v._v(" 命令查看工作区和暂存区文件的比较信息")]),v._v(" "),t("strong",[t("code",[v._v("git diff HEAD <file>")]),v._v(" 命令查看本地库和暂存区文件的比较信息")]),v._v("\ndiff（different）")])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git add <file>")]),v._v(" 将工作区的文件同步到暂存区")]),v._v(" "),t("strong",[t("code",[v._v("git add .")]),v._v(" 将工作区的所有文件同步到暂存区")]),v._v("\n包括修改和删除也是使用该命令")])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git reset <file>")]),v._v(" 将暂存区的文件同步到工作区")]),v._v(" "),t("strong",[t("code",[v._v("git reset .")]),v._v(" 将暂存区的所有文件同步到工作区")])])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git rm --cache <file>")]),v._v(" 删除暂存区的文件")]),v._v(" "),t("strong",[t("code",[v._v("git rm --f <file>")]),v._v(" 删除暂存区和工作区的文件")])])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git mv <file>")]),v._v(" 命令用于剪切或重命名")])])])]),v._v(" "),t("h3",{attrs:{id:"版本库操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#版本库操作"}},[v._v("#")]),v._v(" 版本库操作")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[t("code",[v._v("git commit <file>")]),v._v(" 从暂存区提交到版本库")]),v._v(" "),t("strong",[v._v("命令 + "),t("code",[v._v('-m "message" <file>')]),v._v(" 提交并设置备注")])])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git reflog")]),v._v(" 查看版本库的版本信息")]),v._v(" "),t("strong",[t("code",[v._v("git log")]),v._v(" 查看版本库的版本信息")]),v._v(" "),t("strong",[t("code",[v._v("git log --pretty=online")]),v._v(" 每条信息显示一行")]),v._v(" "),t("strong",[t("code",[v._v("git log --online")]),v._v(" 每条信息显示一行并简写哈希值")])])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git reset <hash_index>")]),v._v(" 修改 HEAD 指针到指定版本")]),v._v(" "),t("strong",[t("code",[v._v("git reset HEAD")]),v._v(" 将版本库同步到暂存区")]),v._v("\n不加后缀默认是 "),t("code",[v._v("--mixed")]),v._v(" 后缀。\n"),t("strong",[t("code",[v._v("git reset HEAD^^")]),v._v(" 回退 HEAD 指针到 "),t("code",[v._v("^")]),v._v(" 的个数个版本前")]),v._v(" "),t("strong",[t("code",[v._v("git reset HEAD~2")]),v._v(" 回退 HEAD 指针到 "),t("code",[v._v("2")]),v._v(" 个版本前")]),v._v("\n一般加 "),t("code",[v._v("--hard")]),v._v(" 后缀\nHEAD 指针指向当前分支")])])]),v._v(" "),t("h3",{attrs:{id:"分支操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[v._v("#")]),v._v(" 分支操作")]),v._v(" "),t("blockquote",[t("p",[v._v("分支用于并行推进多个功能的开发，以提高开发效率\n分支之间彼此独立")])]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[t("code",[v._v("git branch -v")]),v._v(" 命令查看项目中所有的分支")])])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git branch <branch>")]),v._v(" 命令创建新的分支")])])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git branch -r <branch>")]),v._v(" 命令删除分支")])])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git checkout <branch>")]),v._v(" 命令切换分支")])])]),v._v(" "),t("li",[t("p",[t("strong",[t("code",[v._v("git merge <branch>")]),v._v(" 命令合并其他分支到当前分支上")]),v._v(" "),t("strong",[v._v("合并冲突")])]),v._v(" "),t("ol",[t("li",[v._v("进行分支合并时，如果需要更新的代码已经被更新过，就会出现合并冲突")]),v._v(" "),t("li",[v._v("出现合并冲突时，会由自动合并改为手动合并，需要手动修改出现冲突的代码")]),v._v(" "),t("li",[v._v("修改完成后将文件同步到暂存区，最后执行 "),t("code",[v._v("git commit")]),v._v(" 命令完成分支合并")])])])]),v._v(" "),t("h2",{attrs:{id:"远程库操作命令（命令行）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#远程库操作命令（命令行）"}},[v._v("#")]),v._v(" 远程库操作命令（命令行）")]),v._v(" "),t("ul",[t("li",[t("strong",[t("code",[v._v("git remote add <url_name> <url>")]),v._v(" 命令设置推送地址")]),v._v(" "),t("strong",[t("code",[v._v("git remote -v")]),v._v(" 命令查看推送地址")])]),v._v(" "),t("li",[t("strong",[t("code",[v._v("git push <url> <branch>")]),v._v(" 命令向远程库推送")]),v._v("\n在出现合并冲突时就需要先 "),t("code",[v._v("pull")]),v._v(" 到本地手动进行分支合并再进行推送")]),v._v(" "),t("li",[t("strong",[v._v("SSH 免密登陆")]),v._v(" "),t("ol",[t("li",[v._v("在用户根目录下 "),t("code",[v._v("ssh-keygen -t rsa -C <email>")]),v._v(" 生成 SSH 密钥")]),v._v(" "),t("li",[v._v("在 GitHub 的 SSH and GPG keys 菜单下保存密钥")]),v._v(" "),t("li",[v._v("最后执行 "),t("code",[v._v("git push <ssh_url> <branch>")]),v._v(" 就可以完成推送了")])])]),v._v(" "),t("li",[t("strong",[t("code",[v._v("git clone <url>")]),v._v(" 将远程库克隆到本地库")]),v._v(" "),t("strong",[t("code",[v._v("clone")]),v._v(" 操作会有三个作用：")]),v._v(" "),t("ol",[t("li",[v._v("初始化本地库；")]),v._v(" "),t("li",[v._v("下载远程库；")]),v._v(" "),t("li",[v._v("创建远程地址别名")])])]),v._v(" "),t("li",[t("strong",[t("code",[v._v("git pull <url> <branch>")]),v._v(" 命令拉取远程库到本地库")]),v._v(" "),t("code",[v._v("pull")]),v._v(" = "),t("code",[v._v("fetch")]),v._v(" + "),t("code",[v._v("merge")]),v._v(" 拉取操作可以分解未下载与分支合并\n"),t("strong",[t("code",[v._v("git fetch <url> <branch>")]),v._v(" 命令下载远程库到本地库")]),v._v(" "),t("code",[v._v("git checkout <url>/<branch>")]),v._v(" 命令查看下载到本地库的项目文件\n"),t("code",[v._v("git merge <url>/<branch>")]),v._v(" 命令将下载到的分支与本地库进行分支合并")]),v._v(" "),t("li",[t("strong",[v._v("跨团队协作开发")]),v._v(" "),t("ol",[t("li",[v._v("fork 操作拷贝他人项目到自己的远程仓库")]),v._v(" "),t("li",[v._v("pull request 操作申请将自己的远程库合并到他人的远程库中")])])])]),v._v(" "),t("h2",{attrs:{id:"git-工作流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-工作流"}},[v._v("#")]),v._v(" Git 工作流")]),v._v(" "),t("ol",[t("li",[v._v("集中式工作流\n以中央仓库作为项目中所有修改的单点实体，无分支")]),v._v(" "),t("li",[v._v("gitflow 工作流\n为功能开发、发布准备和维护设立独立分支，使迭代更加流畅")]),v._v(" "),t("li",[v._v("forking\n可以接受不受信任贡献者的提交，帮助跨团队协作开发")])]),v._v(" "),t("h3",{attrs:{id:"gitflow-工作流分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gitflow-工作流分支"}},[v._v("#")]),v._v(" gitflow 工作流分支")]),v._v(" "),t("ol",[t("li",[v._v("master 主干分支")]),v._v(" "),t("li",[v._v("develop 开发分支")]),v._v(" "),t("li",[v._v("feature 功能分支\n在开发分支的基础上创建出来的分支，完成后再合并入开发分支")]),v._v(" "),t("li",[v._v("hotfix 修复分支")]),v._v(" "),t("li",[v._v("release 准生产分支（预发布分支）")])]),v._v(" "),t("h2",{attrs:{id:"版本保存机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#版本保存机制"}},[v._v("#")]),v._v(" 版本保存机制")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("快照式版本控制")]),v._v("\nGit 把文件看作式小型文件系统的一组快照，每次提交更新时都会对当前的全部文件制作一个快照并保存其索引。如果更新时文件没有修改，则保存之前文件的索引。")]),v._v(" "),t("li",[t("strong",[v._v("集中式版本控制")]),v._v("\n以文件变更列表的方式存储信息，将保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。")]),v._v(" "),t("li",[t("strong",[v._v("创建分支时会生成指针指向当前版本")])]),v._v(" "),t("li",[t("strong",[v._v("切换分支时 HEAD 指针会在分支之间移动")])])]),v._v(" "),t("h3",{attrs:{id:"hash-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash-算法"}},[v._v("#")]),v._v(" Hash 算法")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("Hash 是一个系列的加密算法")]),v._v("\nHash 可以根据源数据计算出一个特征码")]),v._v(" "),t("li",[t("strong",[v._v("Hash 算法的特点")]),v._v(" "),t("ol",[t("li",[v._v("无论源数据量有多大，经过同一个哈希算法计算出的特征码长度都是相同的")]),v._v(" "),t("li",[v._v("相同的数据经过哈希算法计算后的结果相同")]),v._v(" "),t("li",[v._v("源数据产生变化后，特征码也会发生变化")]),v._v(" "),t("li",[v._v("哈希算法不可逆（非对称性加密）")])])])])])}),[],!1,null,null,null);_.default=i.exports}}]);