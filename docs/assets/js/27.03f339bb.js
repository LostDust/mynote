(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{229:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"es6-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-语法"}},[t._v("#")]),t._v(" ES6 语法")]),t._v(" "),a("p",[t._v("[TOC]")]),t._v(" "),a("h2",{attrs:{id:"声明语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明语句"}},[t._v("#")]),t._v(" 声明语句")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("let")]),t._v(" 语句声明变量：可以重复赋值但不能重复声明；没有变量提升；不能跨块级作用域；全局变量不会成为 "),a("code",[t._v("window")]),t._v(" 对象的属性")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("const")]),t._v("（constant）关键字声明常量：不能重复声明和赋值，一般使用大写")])])]),t._v(" "),a("h2",{attrs:{id:"解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值"}},[t._v("#")]),t._v(" 解构赋值")]),t._v(" "),a("p",[t._v("解构赋值可以用来一次初始化多个变量")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("结构数组")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("let [a, b] = [1, 2]")])]),t._v(" "),a("li",[a("code",[t._v("let [a, b] = [b, a]")]),t._v(" 使用数组解构进行值的互换")]),t._v(" "),a("li",[a("code",[t._v("let [a, [b, c]] = [1, [2, 3]]")])]),t._v(" "),a("li",[a("code",[t._v('let [a, b, c] = "yoo"')])]),t._v(" "),a("li",[t._v("设置默认值："),a("code",[t._v("let [a, b = default] = [1, 2]")])])])]),t._v(" "),a("li",[a("p",[t._v("解构对象")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("let {a, b} = {a: 1, b: 2}")])]),t._v(" "),a("li",[t._v("重新声明并赋值："),a("code",[t._v("let {a, b: c} = {a: 1, b: 2}")])]),t._v(" "),a("li",[t._v("解构对象属性或方法：\n"),a("code",[t._v('let { length } = "yoo"')]),t._v(" 相当于 "),a("code",[t._v('length = "yoo".length')]),t._v(" "),a("code",[t._v("let { floor } = Math")])])])]),t._v(" "),a("li",[a("p",[t._v("解构传参：\n"),a("code",[t._v("function test([a, b]) {}")]),t._v(" "),a("code",[t._v("test([1, 2])")])]),t._v(" "),a("p",[a("code",[t._v("function text({a, b}) {}")]),t._v(" "),a("code",[t._v("test({ a: 1; b: 2 })")])])]),t._v(" "),a("li",[a("p",[t._v("还有一个称为属性简写的功能，它是对象解构的另一种方式\n"),a("code",[t._v('let [x, y] = ["a", "b"]')]),t._v(" "),a("code",[t._v("let obj = { x, y }")]),t._v(" "),a("code",[t._v('console.log(obj); // { x: "a", y: "b" }')])])])]),t._v(" "),a("h2",{attrs:{id:"展开运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#展开运算符"}},[t._v("#")]),t._v(" 展开运算符")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("将传入参数转换为数组的元素，作用类似于不定参\n"),a("code",[t._v("funcrion fun (...x) {}")])])]),t._v(" "),a("li",[a("p",[t._v("剩余参数\n"),a("code",[t._v("funcrion fun (y, ...x) {}")])])]),t._v(" "),a("li",[a("p",[t._v("将集合对象转换为数组\n"),a("code",[t._v('[...document.querySelectorAll("div")].map')])])]),t._v(" "),a("li",[a("p",[t._v("依次调用数组的元素\n"),a("code",[t._v("console.log(...arr)")]),t._v(" "),a("code",[t._v("func(...arr)")])])]),t._v(" "),a("li",[a("p",[t._v("展开对象\n"),a("code",[t._v("const obj2 = { ...obj1 }")])])])]),t._v(" "),a("h2",{attrs:{id:"模板字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板字符串"}},[t._v("#")]),t._v(" 模板字符串")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("模板字符串（模板字面量）是允许嵌入表达式的字符串字，可以使用"),a("em",[t._v("多行字符串")]),t._v("和"),a("em",[t._v("字符串插值")]),t._v("功能")])]),t._v(" "),a("li",[a("p",[t._v("模板字符串包裹在一对反引号（` `）之中，表达式包裹在 "),a("code",[t._v("${}")]),t._v(" 之中")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("标签模板字符串")]),t._v("：标签模板字符串是模板字符串的高级应用形式。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("本质并不是模板，而是函数的特殊调用形式")])]),t._v(" "),a("li",[a("p",[t._v("标签指的是函数，紧跟在后面的模板字符串是函数的传入参数")])]),t._v(" "),a("li",[a("p",[t._v("函数的第一个传入参数是模板字符串中所有字符串片段组成的数组")])]),t._v(" "),a("li",[a("p",[t._v("函数的后续传入参数是模板字符串中所有表达式")])]),t._v(" "),a("li",[a("p",[t._v("标签函数并不一定需要返回一个字符串")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("alert`1`\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Promise 是一个 JS 对象，它代表了一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。")])]),t._v(" "),a("li",[a("p",[t._v("在实例化 Promise 对象时需要传入回调函数，第一个回调会被立即执行，该回调会被传入两个回调参数")])]),t._v(" "),a("li",[a("p",[t._v("调用第一个回调参数 "),a("code",[t._v("resolve(result)")]),t._v(" 表示当前回调执行成功，Promise 会链式调用 "),a("code",[t._v(".then()")]),t._v(" 方法中的第一个回调；")])]),t._v(" "),a("li",[a("p",[t._v("调用第二个回调参数 "),a("code",[t._v("reject()")]),t._v(" 表示当前回调执行失败，Promise 会调用第二个回调或链式调用 "),a("code",[t._v("catch()")]),t._v(" 方法中的回调函数。")])]),t._v(" "),a("li",[a("p",[t._v("本质上，Promise 是一个绑定了回调的对象，而不是将回调传进函数内部")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Promise.all()")]),t._v(" 规整方法（所有都成功才是整体的成功，否则就是失败）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Promise.race()")]),t._v(" 竞速方法（首个出现的执行结果就是整体的执行结果）")])])]),t._v(" "),a("h2",{attrs:{id:"es6-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-函数"}},[t._v("#")]),t._v(" ES6 函数")]),t._v(" "),a("h3",{attrs:{id:"箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[t._v("#")]),t._v(" 箭头函数")]),t._v(" "),a("ul",[a("li",[t._v("语法：foo = x => {}")]),t._v(" "),a("li",[t._v("箭头函数没有声明提升")]),t._v(" "),a("li",[t._v("箭头函数的 this 会指向外部作用域的 this（词法作用域）")])]),t._v(" "),a("h3",{attrs:{id:"延展参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延展参数"}},[t._v("#")]),t._v(" 延展参数")]),t._v(" "),a("ul",[a("li",[t._v("语法："),a("code",[t._v("func (a=1) // 赋予函数形参默认值")])])]),t._v(" "),a("h3",{attrs:{id:"生成器函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成器函数"}},[t._v("#")]),t._v(" 生成器函数")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("生成器函数（"),a("em",[t._v("generator function")]),t._v("）返回一个生成器对象，生成器对象可以反复调用"),a("code",[t._v("next()")]),t._v(" 来返回序列中的下一项")])]),t._v(" "),a("li",[a("p",[t._v("Generator 函数语法：function 和函数名之间有一个 "),a("code",[t._v("*")]),t._v(" 号；函数体内部使用了 "),a("code",[t._v("yield")]),t._v(" 表达式")])]),t._v(" "),a("li",[a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('function* func() {\n  yield function() {\n    console.log("第一个 next");\n  }\n  yield function() {\n    console.log("第二个 next");\n  }\n}\n\nfunc().next()\nfunc().next().valur() => yield_1\nfunc().next().valur() => yield_2\n')])])])])]),t._v(" "),a("h2",{attrs:{id:"面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),a("h3",{attrs:{id:"class-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-语句"}},[t._v("#")]),t._v(" class 语句")]),t._v(" "),a("ul",[a("li",[t._v("ES6 使用 class 语句声明构造函数，本质是封装语法糖，依旧是基于原型的实现方式")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明构造函数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明原型函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("extends")]),t._v(" 关键字扩展一个类并继承它的行为")]),t._v(" "),a("li",[t._v("在构造函数中需要先调用一次 "),a("code",[t._v("super()")]),t._v(" 方法继承父类的构造函数")]),t._v(" "),a("li")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Child")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用父类的构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 扩展子类的构造函数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"属性存取器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性存取器"}},[t._v("#")]),t._v(" 属性存取器")]),t._v(" "),a("ul",[a("li",[t._v("使用 Class 语法也可以为属性创建存取器函数，虽然不像其他面向对象语言（封装概念），类的属性不是私有的，但最好还是遵循一种命名模式")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('class Person {\n  constructor(name) {\n    this._name = name;\n  }\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n    this._name = value;\n  }\n}\nlet min = new Func("first");\nconsole.log(min.name);\nmin.name = "next";\nconsole.log(min.name);\nmin.name = "last";\nconsole.log(min.name);\n')])])]),a("ul",[a("li",[t._v("要声明 get 或 set 函数，只需在要暴露和使用的函数名前面加上 get 或 set 关键字")]),t._v(" "),a("li",[t._v("可以使用相同的名字声明类属性，或者在属性名前面加下划线，让这个属性看起来像是私有的")]),t._v(" "),a("li",[t._v("_name 并非真正的私有属性，我们仍然可以引用它")])]),t._v(" "),a("h3",{attrs:{id:"this-指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-指向"}},[t._v("#")]),t._v(" this 指向")]),t._v(" "),a("ul",[a("li",[t._v("call() 和 alppy() 都能改变 this 指向")]),t._v(" "),a("li",[t._v("利用 apply() 函数的参数特性能把数组转化为参数，类似扩展运算符")]),t._v(" "),a("li",[t._v("bind() 参数与 call() 相同，但只是返回函数体，相当于为一个函数绑定 this")]),t._v(" "),a("li",[t._v("bind() 还可以预定义参数")])]),t._v(" "),a("h2",{attrs:{id:"块级作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域"}},[t._v("#")]),t._v(" 块级作用域")]),t._v(" "),a("ul",[a("li",[t._v("JS 中的作用域：全局作用域、函数作用域、块级作用域（包括 for、if 语句）")]),t._v(" "),a("li",[t._v("通过 var 声明的变量可以跨块作用域访问，但不能跨函数作用域访问")]),t._v(" "),a("li",[t._v("通过 "),a("code",[t._v("let")]),t._v("、"),a("code",[t._v("const")]),t._v(" 声明的变量既不能跨块作用域访问，也不能跨函数作用域访问")])]),t._v(" "),a("h2",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" Symbol")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" first "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("description"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"hello"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keyFor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"hello"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nSymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h2",{attrs:{id:"getter-setter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getter-setter"}},[t._v("#")]),t._v(" getter & setter")]),t._v(" "),a("ul",[a("li",[t._v("也就是说 setter/getter 是"),a("code",[t._v("hook函数")]),t._v("，而真实的存储变量是"),a("code",[t._v("_name")]),t._v("，我们可以在代码中直接获取它。")]),t._v(" "),a("li",[a("code",[t._v("get name () { return this._name; }")])])]),t._v(" "),a("h2",{attrs:{id:"装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[t._v("#")]),t._v(" 装饰器")]),t._v(" "),a("ul",[a("li",[t._v("装饰器能够为类添加静态属性和方法")]),t._v(" "),a("li",[a("strong",[t._v("装饰器对类的行为的改变，是代码编译时发生的，而不是在运行时")]),t._v("。这意味着，装饰器能在编译阶段运行代码。也就是说，"),a("strong",[t._v("装饰器本质就是编译时执行的函数")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code")])])])}),[],!1,null,null,null);s.default=e.exports}}]);